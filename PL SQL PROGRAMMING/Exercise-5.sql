SET SERVEROUTPUT ON;
-- ===== Trigger 1: Update LastModified when Customer is updated =====
CREATE OR REPLACE TRIGGER UpdateCustomerLastModified
BEFORE UPDATE ON Customers
FOR EACH ROW
BEGIN
    :NEW.LastModified := SYSDATE;
END;
/

-- ===== Supporting Table for Trigger 2 =====
CREATE TABLE AuditLog (
    LogID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    TransactionID NUMBER,
    AccountID NUMBER,
    Amount NUMBER,
    TransactionType VARCHAR2(10),
    TransactionDate DATE,
    LoggedAt DATE DEFAULT SYSDATE
);

-- ===== Trigger 2: Log Transaction Insert into AuditLog =====
CREATE OR REPLACE TRIGGER LogTransaction
AFTER INSERT ON Transactions
FOR EACH ROW
BEGIN
    INSERT INTO AuditLog (TransactionID, AccountID, Amount, TransactionType, TransactionDate)
    VALUES (:NEW.TransactionID, :NEW.AccountID, :NEW.Amount, :NEW.TransactionType, :NEW.TransactionDate);
END;
/

-- ===== Trigger 3: Enforce Transaction Rules (Deposit/Withdrawal) =====
CREATE OR REPLACE TRIGGER CheckTransactionRules
BEFORE INSERT ON Transactions
FOR EACH ROW
DECLARE
    v_balance NUMBER;
BEGIN
    IF :NEW.TransactionType = 'Deposit' AND :NEW.Amount <= 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Deposit amount must be positive.');
    ELSIF :NEW.TransactionType = 'Withdrawal' THEN
        SELECT Balance INTO v_balance
        FROM Accounts
        WHERE AccountID = :NEW.AccountID;

        IF :NEW.Amount <= 0 THEN
            RAISE_APPLICATION_ERROR(-20002, 'Withdrawal amount must be positive.');
        ELSIF :NEW.Amount > v_balance THEN
            RAISE_APPLICATION_ERROR(-20003, 'Insufficient balance for withdrawal.');
        END IF;
    END IF;
END;
/

-- ===== ✅ VALID TEST CASES =====

-- ✅ Test 1: Valid Customer update (check LastModified update)
UPDATE Customers SET Name = 'Johnathan Doe' WHERE CustomerID = 1;
SELECT Name, LastModified FROM Customers WHERE CustomerID = 1;

-- ✅ Test 2: Valid Deposit
INSERT INTO Transactions (TransactionID, AccountID, TransactionDate, Amount, TransactionType)
VALUES (201, 1, SYSDATE, 200, 'Deposit');

-- ✅ Test 3: Valid Withdrawal (ensure account has sufficient balance)
INSERT INTO Transactions (TransactionID, AccountID, TransactionDate, Amount, TransactionType)
VALUES (202, 1, SYSDATE, 100, 'Withdrawal');

-- ✅ Test 4: View entries in AuditLog (should include above transactions)
SELECT * FROM AuditLog;
DECLARE
    v_name VARCHAR2(100);
    v_lastmod DATE;
BEGIN
    SELECT Name, LastModified INTO v_name, v_lastmod
    FROM Customers
    WHERE CustomerID = 1;

    DBMS_OUTPUT.PUT_LINE('Name: ' || v_name);
    DBMS_OUTPUT.PUT_LINE('LastModified: ' || TO_CHAR(v_lastmod, 'DD-MON-YYYY HH24:MI:SS'));
END;
/
SELECT Name, LastModified FROM Customers WHERE CustomerID = 1;
SELECT * FROM Transactions WHERE TransactionID IN (201, 202);
SELECT * FROM AuditLog;
SELECT Balance FROM Accounts WHERE AccountID = 1;
